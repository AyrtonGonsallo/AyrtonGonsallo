import nltk
import spacy
import clause
import identification
import nonClause
import questionValidation
from nlpNER import nerTagger


def chunk_search(segment, chunked):
    m = len(chunked)
    list1 = []
    for j in range(m):
        if (len(chunked[j]) > 2 or len(chunked[j]) == 1):
            list1.append(j)
        if (len(chunked[j]) == 2):
            try:
                str1 = chunked[j][0][0] + " " + chunked[j][1][0]
            except Exception:
                pass
            else:
                if (str1 in segment) == True:
                    list1.append(j)
    return list1



nlp = spacy.load("en_core_web_sm")
d2 = nlp('90 of them will died')
docx = nlp('The Machine is a computer system thought, built and designed by Harold Finch and Nathan')
phrases = [wor.text for wor in d2.sents]
for r in range(len(phrases)):
    propo = phrases[r].split(",")
    for k in range(len(propo)):

        tok = nltk.word_tokenize(propo[k])  # tokeniser la proposition
        tag = nltk.pos_tag(tok)  # trouver la nature des mots
        gram = r"""chunk:{<\$>*<CD>+<MD>?<VB|VBD|VBG|VBP|VBN|VBZ|RP>+}"""
        chunkparser = nltk.RegexpParser(gram)
        chunked = chunkparser.parse(tag)
        chunked.draw()
        """for d in range(len(chunked)):
            print(chunked[d], len(chunked[d]))
            print(chunked[d][0][0] + " " + chunked[d][1][0])"""



def aqgParse(sentence):
    nlp = spacy.load('en_core_web_md')

    singleSentences = sentence.split(".")
    questionsList = []
    if len(singleSentences) != 0:
        for i in range(len(singleSentences)):
            segmentSets = singleSentences[i].split(",")

            ner = nerTagger(nlp, singleSentences[i])

            if (len(segmentSets)) != 0:
                for j in range(len(segmentSets)):
                    try:
                        questionsList += clause.howmuch_2(segmentSets, j, ner)
                    except Exception:
                        pass

                    if identification.clause_identify(segmentSets[j]) == 1:
                        try:
                            questionsList += clause.whom_1(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.whom_2(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.whom_3(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.whose(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.what_to_do(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.who(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.howmuch_1(segmentSets, j, ner)
                        except Exception:
                            pass
                        try:
                            questionsList += clause.howmuch_3(segmentSets, j, ner)
                        except Exception:
                            pass


                        else:
                            try:
                                s = identification.subjectphrase_search(segmentSets, j)
                            except Exception:
                                pass

                            if len(s) != 0:
                                segmentSets[j] = s + segmentSets[j]
                                try:
                                    questionsList += clause.whom_1(segmentSets, j, ner)
                                except Exception:
                                    pass
                                try:
                                    questionsList += clause.whom_2(segmentSets, j, ner)
                                except Exception:
                                    pass
                                try:
                                    questionsList += clause.whom_3(segmentSets, j, ner)
                                except Exception:
                                    pass
                                try:
                                    questionsList += clause.whose(segmentSets, j, ner)
                                except Exception:
                                    pass
                                try:
                                    questionsList += clause.what_to_do(segmentSets, j, ner)
                                except Exception:
                                    pass
                                try:
                                    questionsList += clause.who(segmentSets, j, ner)
                                except Exception:
                                    pass

                                else:
                                    try:
                                        questionsList += nonClause.what_whom1(segmentSets, j, ner)
                                    except Exception:
                                        pass
                                    try:
                                        questionsList += nonClause.what_whom2(segmentSets, j, ner)
                                    except Exception:
                                        pass
                                    try:
                                        questionsList += nonClause.whose(segmentSets, j, ner)
                                    except Exception:
                                        pass
                                    try:
                                        questionsList += nonClause.howmany(segmentSets, j, ner)
                                    except Exception:
                                        pass
                                    try:
                                        questionsList += nonClause.howmuch_1(segmentSets, j, ner)
                                    except Exception:
                                        pass

            questionsList.append('\n')
    return questionsList



